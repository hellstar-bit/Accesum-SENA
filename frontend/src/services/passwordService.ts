// frontend/src/services/passwordService.ts
import api from './api';

export interface ChangePasswordData {
  currentPassword: string;
  newPassword: string;
  confirmPassword: string;
}

export interface PasswordResponse {
  message: string;
  success: boolean;
  timestamp: string;
}

export interface VerifyPasswordResponse {
  isValid: boolean;
  message: string;
}

class PasswordService {
  // ‚≠ê CAMBIAR CONTRASE√ëA
  async changePassword(data: ChangePasswordData): Promise<PasswordResponse> {
    console.log('üîê passwordService.changePassword - Iniciando...');
    
    try {
      const response = await api.post('/auth/change-password', data);
      console.log('‚úÖ passwordService.changePassword - Exitoso');
      return response.data;
    } catch (error: any) {
      console.error('‚ùå passwordService.changePassword - Error:', error);
      
      const errorMessage = error.response?.data?.message || 
                          error.message || 
                          'Error al cambiar contrase√±a';
      
      throw new Error(errorMessage);
    }
  }

  // ‚≠ê VERIFICAR CONTRASE√ëA ACTUAL
  async verifyCurrentPassword(currentPassword: string): Promise<VerifyPasswordResponse> {
    console.log('üîç passwordService.verifyCurrentPassword - Verificando...');
    
    try {
      const response = await api.post('/auth/verify-password', { currentPassword });
      console.log('‚úÖ passwordService.verifyCurrentPassword - Exitoso');
      return response.data;
    } catch (error: any) {
      console.error('‚ùå passwordService.verifyCurrentPassword - Error:', error);
      
      // Retornar respuesta de error en lugar de lanzar excepci√≥n
      return {
        isValid: false,
        message: error.response?.data?.message || 'Error al verificar contrase√±a'
      };
    }
  }

  // ‚≠ê VALIDAR FORMATO DE CONTRASE√ëA
  validatePassword(password: string): { isValid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (!password) {
      errors.push('La contrase√±a es obligatoria');
    } else {
      if (password.length < 6) {
        errors.push('La contrase√±a debe tener al menos 6 caracteres');
      }
      
      if (password.length > 50) {
        errors.push('La contrase√±a no puede tener m√°s de 50 caracteres');
      }
      
      // Opcional: agregar m√°s validaciones
      // if (!/[A-Z]/.test(password)) {
      //   errors.push('La contrase√±a debe contener al menos una may√∫scula');
      // }
      
      // if (!/[0-9]/.test(password)) {
      //   errors.push('La contrase√±a debe contener al menos un n√∫mero');
      // }
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  // ‚≠ê VALIDAR QUE LAS CONTRASE√ëAS COINCIDAN
  validatePasswordMatch(password: string, confirmPassword: string): boolean {
    return password === confirmPassword;
  }

  // ‚≠ê GENERAR SUGERENCIAS DE CONTRASE√ëA SEGURA
  generatePasswordSuggestions(): string[] {
    return [
      'Usa al menos 8 caracteres',
      'Combina letras may√∫sculas y min√∫sculas',
      'Incluye n√∫meros y s√≠mbolos',
      'Evita informaci√≥n personal',
      'No uses contrase√±as comunes',
    ];
  }
}

export const passwordService = new PasswordService();